MANUAL SETUP
============

Keyboard - MX Keys
Needed to set this up manually via Bluetooth

Hostname - 'UNKNOWN' -> 'inspiron'
This was done manually because it doesn't really make sense to
do it via Ansible and it's a one-time thing. Easier to just do
it via the GNOME settings app, document it and move on.

Installed updates (as my OS image was old)

GNOME Terminal - renamed profile to 'Main'
GNOME Terminal - changed initial terminal size to '140 columns' and '40 rows'
GNOME Terminal - disabled the 'Terminal bell' setting

Get the home-infra repo
-----------------------

	mkdir -p ~/Documents/Projects/github.com/apatel762/
	cd ~/Documents/Projects/github.com/apatel762/
	git clone https://github.com/apatel762/home-infra.git

Setup Python
------------

Don't want to use the global installation of Python for anything

The below setup will help us isolate everything related to Python
so that the system installation can be as clean as possible.

-- pyenv
--------

Get the pyenv repo and install it to your local sofware folder

	git clone https://github.com/pyenv/pyenv.git ~/.local/share/.pyenv

	mkdir -p ~/.bashrc.d
	cp -vu 01-pyenv -t ~/.bashrc.d

...and make sure this is in your .bashrc somewhere:

	# User specific aliases and functions
	if [ -d ~/.bashrc.d ]; then
		for rc in ~/.bashrc.d/*; do
			if [ -f "$rc" ]; then
				. "$rc"
			fi
		done
	fi
	unset rc

setting the global python version to the pyenv installation

	# install pyenv dependencies into a container before installing
	# a particular version of python via pyenv
	toolbox enter
	sudo dnf update vte-profile  # https://github.com/containers/toolbox/issues/390
	sudo dnf install "@Development Tools" zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel findutils

	# find the latest stable version of Python
	pyenv install --list | less

	# install that version of Python
	pyenv install 3.10.4
	pyenv global 3.10.4

using the pyenv global command, the pyenv shim will always default
to the local pyenv installation unless overridden somewhere else

-- pipx
-------

We're going to install pipx via a virtual environment, following the
theme of 'I dont want to touch the system Python dependencies at all'.

The only system packages that we are going to install are 'setuptools'
and 'wheel'. I think this is fine compared to installing everything
that pipx depends on AND those two packages.

	python -m pip install --upgrade pip setuptools wheel
	python -m venv .venv
	source .venv/bin/activate
	python -m pip install --upgrade pip setuptools wheel
	python -m pip install --upgrade pipx
	pipx install pipx --force
	pipx ensurepath
	deactivate
	rm -rf .venv
	rm ~/.local/pipx/venvs/pipx/bin/python
	ln -s "$(pyenv prefix)/bin/python" ~/.local/pipx/venvs/pipx/bin/python

and if it's worked, pipx should still be available:

	pipx --version

to uninstall pipx after installing it like this:

	pipx uninstall-all
	rm -f ~/.local/bin/pipx
	rm -rf ~/.local/pipx

Ansible
-------

There is no need to install this globally, just going to do it in a
venv, inside of the home-infra repo

	cd ~/Documents/Projects/github.com/apatel762/home-infra
	cd workstation
	make install
	# NOTE: this creates ~/.ansible even though Ansible is in the venv...

and then to configure the machine, use

	make apply

The machine should now be configured. Don't forget to install the dotfiles...
