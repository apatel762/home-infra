#!/usr/bin/env bash

###############################################################################
# This function was taken from https://github.com/xwmx/nb/ and has been
# modified slightly to work with this script
###############################################################################

# _exit_1()
#
# Usage:
#   _exit_1 <command>
#
# Description:
#   Exit with status 1 after executing the specified command with output
#   redirected to standard error. The command is expected to print a message
#   and should typically be either `echo`, `printf`, or `cat`.
_exit_1() {
  {
    printf "\n%s " "ERROR:"
    "${@}"
  } 1>&2
  exit 1
}

###############################################################################

# desc: check that a binary is installed, otherwise output error message
# args:
#  $1 = the name of the binary that we require
#  $2 = the reason why the binary is needed
_require() {
	command -v "$1" > /dev/null 2>&1 \
		|| _exit_1 cat <<HEREDOC

Not found: $1
Needed for: $2

Please install this program and ensure that it is on your PATH before
attempting to use this script.

HEREDOC
}

# desc: check that all pre-requisites for this script are installed
_check_requirements() {
	_require pipx "Installing apps"
}

# desc: installs an app using pipx
# args:
#   $1 = the name used to install the app (will be used like: 'pipx install $1')
#   $2 = the name of the app after installed (would be used like: 'pipx upgrade $2')
# note:
#   the two names will be different if, for example, you are installing
#   from a git repository, where $1 would be the git repo URL and
#   $2 would be the name of the package after it's installed
_ensure_installed() {
	if  [[ ! -d "{{ lookup('env','HOME') }}/.local/pipx/venvs/$2" ]]  &>/dev/null; then
		pipx install "$1"
	fi
}

# desc: injects a dependency into a pipx venv
# args:
#   $1 = the name of the app that needs the dependency
#   $2 = the name of the dependency
_ensure_injected() {
	if  [[ -z "$("{{ lookup('env','HOME') }}/.local/pipx/venvs/$1/bin/python" -m pip freeze | grep "$2")" ]] &>/dev/null; then
		pipx inject "$1" "$2"
	fi
}

# desc: install updates for all installed pipx apps
_update_all_installed() {
	# we decide whether or not to install updated based on whether or not
	# we've got a file in /tmp. This way, we can install updates once, and
	# then create the temp file to ensure that the user doesn't have to
	# install updates again until they reboot (because the /tmp folder
	# contents are deleted on reboot).
	local PIPX_UPDATES_FILE
	PIPX_UPDATES_FILE="/tmp/pipx-maintain.done"

	if [[ ! -f "$PIPX_UPDATES_FILE" ]]; then
		echo ""
		echo "CHECKING FOR PIPX UPDATES"
		touch "$PIPX_UPDATES_FILE"
		pipx upgrade-all
	fi
}

_main() {
	_check_requirements

	{% for item in pipx_apps %}
	_ensure_installed "{{ item.install | default(item.name) }}" "{{ item.name }}"
	{% if 'dependencies' in item -%}
	{% for dependency in item.dependencies %}
	_ensure_injected "{{ item.name }}" "{{ dependency }}"
	{% endfor %}
	{% endif %}
	{% endfor %}

	_update_all_installed
}

_main
