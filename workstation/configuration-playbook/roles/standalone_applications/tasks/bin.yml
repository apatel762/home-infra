---

- name: Capture current version of bin
  ansible.builtin.shell:  bin -v | grep bin | awk '{print $3}'
  register: actual_bin_version
  changed_when: False

- name: Download bin if not present on system
  ansible.builtin.get_url:
    url: https://github.com/marcosnils/bin/releases/download/v{{ bin_base_version }}/bin_{{ bin_base_version }}_Linux_x86_64
    dest: /tmp/bin
    mode: u=rwx,go=rw
  when: not actual_bin_version.stdout or actual_bin_version.stdout is version(bin_base_version, '<')

- name: Check current status of bin config file
  ansible.builtin.stat:
    path: "{{ lookup('env', 'HOME') }}/.config/bin/config.json"
  register: bin_config_file

- name: Ensure that bin config folders exist in home dir
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ lookup('env', 'HOME') }}/.config/bin/"
    - "{{ lookup('env', 'HOME') }}/.local/bin/"

- name: Ensure that bin config file exists in home dir
  ansible.builtin.template:
    src: templates/bin-config.json.jinja2
    dest: "{{ lookup('env', 'HOME') }}/.config/bin/config.json"
    mode: "u=rw,g=r,o-rwx"
  when: not bin_config_file.stat.exists

- name: Ensure that bin is managing itself
  ansible.builtin.shell: /tmp/bin list | grep github.com/marcosnils/bin || /tmp/bin install github.com/marcosnils/bin
  when: not actual_bin_version.stdout or actual_bin_version.stdout is version(bin_base_version, '<')

- name: Ensure that the bin-maintain script is present in local bin
  ansible.builtin.template:
    src: templates/bin-maintain.jinja2
    dest: "{{ lookup('env','HOME') }}/.local/bin/bin-maintain"
    mode: "u=rx,g=r,o-rwx"
